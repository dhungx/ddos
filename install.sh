#!/bin/bash
# -*- coding: utf-8 -*-
# Script c·∫£i ti·∫øn c√†i ƒë·∫∑t v√† c·∫•u h√¨nh m√¥i tr∆∞·ªùng v·ªõi logging v√† x·ª≠ l√Ω l·ªói chuy√™n nghi·ªáp.

# === C·∫•u h√¨nh m√†u s·∫Øc ===
RED_BOLD="\033[1;31m"
GREEN_BOLD="\033[1;32m"
YELLOW_BOLD="\033[1;33m"
RESET="\033[0m"

# === File log ===
LOG_FILE="install.log"
exec > >(tee -a "$LOG_FILE") 2>&1
echo "==== B·∫Øt ƒë·∫ßu c√†i ƒë·∫∑t: $(date) ===="

# === H√†m x√≥a m√†n h√¨nh terminal ===
clear_screen() {
    case "$OSTYPE" in
        msys*|cygwin*|win32*) cls ;;
        *) clear ;;
    esac
}
clear_screen

# === Ki·ªÉm tra quy·ªÅn root ===
if [[ $EUID -ne 0 ]]; then
    echo -e "${RED_BOLD}Vui l√≤ng ch·∫°y script v·ªõi quy·ªÅn root (sudo).${RESET}"
    exit 1
fi

# === Ki·ªÉm tra k·∫øt n·ªëi Internet ===
echo -e "${GREEN_BOLD}üîç Ki·ªÉm tra k·∫øt n·ªëi Internet...${RESET}"
if ! ping -c 1 8.8.8.8 &>/dev/null; then
    echo -e "${RED_BOLD}‚ùå Kh√¥ng c√≥ k·∫øt n·ªëi Internet! H√£y ki·ªÉm tra m·∫°ng.${RESET}"
    exit 1
fi

# === Ki·ªÉm tra dung l∆∞·ª£ng ·ªï ƒëƒ©a (t·ªëi thi·ªÉu 50MB) ===
FREE_SPACE=$(df / | tail -1 | awk '{print $4}')
if [[ $FREE_SPACE -lt 50000 ]]; then
    echo -e "${RED_BOLD}‚ùå Dung l∆∞·ª£ng ·ªï ƒëƒ©a qu√° th·∫•p! C·∫ßn √≠t nh·∫•t 50MB tr·ªëng.${RESET}"
    exit 1
fi

# === Ch·ªçn h·ªá ƒëi·ªÅu h√†nh ===
echo -e "${GREEN_BOLD}üñ•Ô∏è Ch·ªçn h·ªá ƒëi·ªÅu h√†nh c·ªßa b·∫°n:${RESET}"
echo "1) Kali Linux/Ubuntu/Debian (apt)"
echo "2) Arch Linux (pacman)"
echo "3) Alpine Linux (apk)"
echo "4) Termux (pkg)"
echo "5) macOS"
echo "6) Windows"
read -p "L·ª±a ch·ªçn (1/2/3/4/5/6): " os_choice

# === H√†m ki·ªÉm tra & c√†i ƒë·∫∑t g√≥i ===
check_and_install() {
    local cmd=$1
    local pkg=$2
    if ! command -v "$pkg" &>/dev/null; then
        echo -e "${YELLOW_BOLD}üì¶ ƒêang c√†i ƒë·∫∑t ${pkg}...${RESET}"
        eval "$cmd $pkg"
        if [[ $? -ne 0 ]]; then
            echo -e "${RED_BOLD}‚ùå C√†i ƒë·∫∑t ${pkg} th·∫•t b·∫°i.${RESET}"
            exit 1
        fi
    else
        echo -e "${GREEN_BOLD}‚úî ${pkg} ƒë√£ c√≥ s·∫µn.${RESET}"
    fi
}

# === C√†i ƒë·∫∑t c√°c g√≥i c·∫ßn thi·∫øt ===
install_packages() {
    local install_cmd=""
    case "$os_choice" in
        1)
            install_cmd="sudo apt install -y"
            packages=("python3" "python3-pip" "nmap" "iptables")
            ;;
        2)
            install_cmd="sudo pacman -S --noconfirm"
            packages=("python" "python-pip" "nmap" "iptables")
            ;;
        3)
            install_cmd="sudo apk add"
            packages=("python3" "py3-pip" "nmap" "iptables")
            ;;
        4)
            install_cmd="pkg install -y"
            packages=("python" "nmap")
            ;;
        5)
            if ! command -v brew &>/dev/null; then
                echo -e "${GREEN_BOLD}üç∫ C√†i ƒë·∫∑t Homebrew...${RESET}"
                /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
            fi
            install_cmd="brew install"
            packages=("python" "nmap")
            ;;
        6)
            echo -e "${RED_BOLD}‚ùå Tr√™n Windows, vui l√≤ng c√†i ƒë·∫∑t Python, pip v√† nmap th·ªß c√¥ng.${RESET}"
            exit 1
            ;;
        *)
            echo -e "${RED_BOLD}‚ùå L·ª±a ch·ªçn kh√¥ng h·ª£p l·ªá! Tho√°t.${RESET}"
            exit 1
            ;;
    esac

    echo -e "${GREEN_BOLD}üîÑ C·∫≠p nh·∫≠t h·ªá th·ªëng...${RESET}"
    case "$os_choice" in
        1) sudo apt update && sudo apt upgrade -y ;;
        2) sudo pacman -Syu --noconfirm ;;
        3) sudo apk update && sudo apk upgrade ;;
        4) pkg update && pkg upgrade -y ;;
        5) brew update && brew upgrade ;;
    esac

    for pkg in "${packages[@]}"; do
        check_and_install "$install_cmd" "$pkg"
    done
}

# === C√†i ƒë·∫∑t pip n·∫øu ch∆∞a c√≥ ===
install_pip() {
    if ! command -v pip3 &>/dev/null; then
        echo -e "${YELLOW_BOLD}üì• C√†i ƒë·∫∑t pip3...${RESET}"
        curl -sS https://bootstrap.pypa.io/get-pip.py -o get-pip.py
        python3 get-pip.py && rm get-pip.py
        if ! command -v pip3 &>/dev/null; then
            echo -e "${RED_BOLD}‚ùå C√†i ƒë·∫∑t pip3 th·∫•t b·∫°i.${RESET}"
            exit 1
        fi
    else
        echo -e "${GREEN_BOLD}‚úî pip3 ƒë√£ c√≥ s·∫µn.${RESET}"
    fi
}

# === C√†i ƒë·∫∑t th∆∞ vi·ªán Python ===
install_python_libs() {
    PYTHON_LIBS=("requests" "colorama" "humanfriendly" "PySocks" "scapy" "get-mac")
    TOTAL_LIBS=${#PYTHON_LIBS[@]}
    CURRENT_LIB=0

    echo -e "${GREEN_BOLD}üöÄ ƒêang c√†i ƒë·∫∑t th∆∞ vi·ªán Python...${RESET}"
    for lib in "${PYTHON_LIBS[@]}"; do
        ((CURRENT_LIB++))
        PERCENT=$((CURRENT_LIB * 100 / TOTAL_LIBS))
        echo -ne "${YELLOW_BOLD}üîÑ [${CURRENT_LIB}/${TOTAL_LIBS}] C√†i ƒë·∫∑t ${lib}... (${PERCENT}%)${RESET}\r"
        pip3 install --quiet --timeout=60 -i https://pypi.tuna.tsinghua.edu.cn/simple "$lib"
        if [[ $? -ne 0 ]]; then
            echo -e "\n${RED_BOLD}‚ùå C√†i ƒë·∫∑t ${lib} th·∫•t b·∫°i.${RESET}"
            exit 1
        fi
    done
    echo -e "\n${GREEN_BOLD}‚úî T·∫•t c·∫£ th∆∞ vi·ªán ƒë√£ ƒë∆∞·ª£c c√†i ƒë·∫∑t th√†nh c√¥ng!${RESET}"
}

# === C·∫•u h√¨nh iptables ===
configure_iptables() {
    echo -e "${GREEN_BOLD}üõ°Ô∏è C·∫•u h√¨nh iptables ƒë·ªÉ b·∫£o v·ªá h·ªá th·ªëng...${RESET}"
    sudo iptables -A INPUT -m conntrack --ctstate ESTABLISHED,RELATED -j ACCEPT
    sudo iptables -A INPUT -j DROP
    if [[ $? -eq 0 ]]; then
        echo -e "${GREEN_BOLD}‚úî C·∫•u h√¨nh iptables ho√†n t·∫•t! Ki·ªÉm tra b·∫±ng: sudo iptables -L -v${RESET}"
    else
        echo -e "${RED_BOLD}‚ùå C·∫•u h√¨nh iptables g·∫∑p l·ªói.${RESET}"
    fi
    echo -e "${RED_BOLD}‚ö† N·∫øu m·∫•t m·∫°ng, ch·∫°y: sudo iptables --flush${RESET}"
}

# === Ch·∫°y file vbs.py n·∫øu t·ªìn t·∫°i ===
run_vbs() {
    if [[ -f "vbs.py" ]]; then
        echo -e "${GREEN_BOLD}üöÄ Ch·∫°y vbs.py...${RESET}"
        if ! python3 vbs.py; then
            echo -e "${RED_BOLD}‚ùå L·ªói khi ch·∫°y vbs.py! Ki·ªÉm tra l·∫°i m√£ ngu·ªìn.${RESET}"
            exit 1
        fi
    else
        echo -e "${RED_BOLD}‚ùå Kh√¥ng t√¨m th·∫•y vbs.py! Ki·ªÉm tra l·∫°i th∆∞ m·ª•c.${RESET}"
    fi
}

# === Main process ===
main() {
    install_packages
    install_pip
    install_python_libs
    configure_iptables
    run_vbs
}

main